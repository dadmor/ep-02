
DECLARE
  answer_rec RECORD;
  task_rec RECORD;
  correct_count INT := 0;
  total_count INT := 0;
  lesson_score INT;
  base_xp INT := 0;
  current_streak INT;
  streak_bonus_val INT := 0;
  final_xp INT;
BEGIN
  -- Walidacja struktury JSON
  IF jsonb_typeof(p_answers) != 'array' OR jsonb_array_length(p_answers) = 0 THEN
    RAISE EXCEPTION 'Answers musi być niepustą tablicą JSON';
  END IF;
  
  -- Pobierz aktualny streak użytkownika
  SELECT users.streak INTO current_streak 
  FROM users WHERE id = p_user_id;
  
  -- Oblicz bonus za streak (5 punktów za każdy dzień, max 50)
  streak_bonus_val := LEAST(COALESCE(current_streak, 0) * 5, 50);
  
  -- Przejdź przez wszystkie odpowiedzi
  FOR answer_rec IN 
    SELECT 
      (answer_item->>'task_id')::UUID as task_id,
      answer_item->>'answer' as user_answer
    FROM jsonb_array_elements(p_answers) as answer_item
  LOOP
    -- Walidacja struktury pojedynczej odpowiedzi
    IF answer_rec.task_id IS NULL OR answer_rec.user_answer IS NULL THEN
      RAISE EXCEPTION 'Każda odpowiedź musi zawierać task_id i answer';
    END IF;
    
    total_count := total_count + 1;
    
    -- Pobierz dane zadania i sprawdź czy należy do lekcji
    SELECT correct_answer, xp_reward 
    INTO task_rec 
    FROM tasks 
    WHERE id = answer_rec.task_id AND lesson_id = p_lesson_id;
    
    IF NOT FOUND THEN
      RAISE EXCEPTION 'Zadanie % nie należy do lekcji %', answer_rec.task_id, p_lesson_id;
    END IF;
    
    IF answer_rec.user_answer = task_rec.correct_answer THEN
      -- Poprawna odpowiedź
      correct_count := correct_count + 1;
      base_xp := base_xp + task_rec.xp_reward;
    ELSE
      -- Błędna odpowiedź - zapisz do analizy
      INSERT INTO incorrect_answers (user_id, task_id, lesson_id, given_answer)
      VALUES (p_user_id, answer_rec.task_id, p_lesson_id, answer_rec.user_answer);
    END IF;
  END LOOP;
  
  -- Oblicz wynik procentowy
  lesson_score := CASE 
    WHEN total_count > 0 THEN ROUND((correct_count::DECIMAL / total_count) * 100)
    ELSE 0 
  END;
  
  final_xp := base_xp + streak_bonus_val;
  
  -- Zapisz lub zaktualizuj progress
  INSERT INTO progress (user_id, lesson_id, score, total_tasks, correct_tasks, streak_bonus)
  VALUES (p_user_id, p_lesson_id, lesson_score, total_count, correct_count, streak_bonus_val)
  ON CONFLICT (user_id, lesson_id) 
  DO UPDATE SET
    score = GREATEST(progress.score, EXCLUDED.score),  -- Zachowaj lepszy wynik
    total_tasks = EXCLUDED.total_tasks,
    correct_tasks = EXCLUDED.correct_tasks,
    attempts_count = progress.attempts_count + 1,
    streak_bonus = EXCLUDED.streak_bonus,
    completed_at = NOW();
  
  -- Zwróć wyniki
  RETURN QUERY SELECT lesson_score, total_count, correct_count, final_xp, streak_bonus_val;
  
  RAISE NOTICE 'Przetworzono lekcję % dla użytkownika %: %/% (Score: %, XP: %)', 
    p_lesson_id, p_user_id, correct_count, total_count, lesson_score, final_xp;
END;
